<?php

namespace RybakDigital\Bundle\UserBundle\Entity;

use Doctrine\ORM\NoResultException;
use Doctrine\ORM\EntityRepository;
use Ucc\Db\Filter\Filter;

/**
 * UserOrganisationRoleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserOrganisationRoleRepository extends EntityRepository
{
    public static function getValidFilters()
    {
        return array_merge(
            self::getUserFilters(),
            self::getOrganisationFilters(),
            self::getRolesFilters()
        );
    }

    public static function getUserFilters()
    {
        return array(
            'user.id',
            'user.username',
            'user.firstName',
            'user.lastName',
            'user.isActive',
            'user.isExpired',
            'user.isLocked',
            'user.isCredentialsExpired',
        );
    }

    public static function getEmailFilters()
    {
        return array(
            'email.email',
        );
    }

    public static function getOrganisationFilters()
    {
        return array(
            'organisation.id',
            'organisation.namespace',
            'organisation.name',
            'organisation.description',
        );
    }

    public static function getRolesFilters()
    {
        return array(
            'role.id',
            'role.name',
            'role.role',
        );
    }

    public static function getValidSorts() {
        return array(
            'user.id',
            'organisation.id',
            'role.id',
        );
    }

    public function getUserOrganisations($id, $roles = array(), $includeDescendants = false, $filters = array())
    {
        $orgs = array();

        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select(array('uors', 'organisation'))
            ->leftJoin('uors.user', 'user')
            ->leftJoin('uors.role', 'roles')
            ->leftJoin('uors.organisation', 'organisation')
            ->andWhere('user.id = :id')
            ->andWhere($qb->expr()->in('roles.role', ':roles'))
            ->setParameter('id', $id)
            ->setParameter('roles', $roles);

        // If there are any filters
        if(!empty($filters)) {
            $dql = Filter::filtersToDqlClause($filters, $qb);
        }

        $query = $qb->getQuery();

        $res = $query->getResult();

        foreach ($res as $uor) {
            // Get unique organisations only
            $orgs[$uor->getOrganisation()->getId()] = $uor->getOrganisation();

            // Add descendants if required
            if ($includeDescendants) {
                // We want to preserve numeric indexes hance we can not use merge
                $orgs = $orgs + $uor->getOrganisation()->getDescendants();
            }
        }

        return $orgs;
    }

    public function getUserRolesForOrganisation($user, $organisation)
    {
        $roles = array();

        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select(array('uors', 'roles'))
            ->leftJoin('uors.user', 'user')
            ->leftJoin('uors.role', 'roles')
            ->leftJoin('uors.organisation', 'organisation')
            ->andWhere('user.id = :userId')
            ->andWhere('organisation.id = :orgId')
            ->setParameter('userId', $user->getId())
            ->setParameter('orgId', $organisation->getId());

            $query = $qb->getQuery();

            $res = $query->getResult();

        foreach ($res as $uor) {
            $roles[$uor->getRole()->getId()] = $uor->getRole();
        }

        return $roles;
    }

    public function getUserOrganisationRole($user, $organisation, $role)
    {
        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select('uors')
            ->andWhere('uors.user = :user')
            ->andWhere('uors.organisation = :organisation')
            ->andWhere('uors.role = :role')
            ->setParameter('user', $user)
            ->setParameter('organisation', $organisation)
            ->setParameter('role', $role);

        $query = $qb->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            return $query->getSingleResult();
        } catch (\Exception $e) {
            return false;
        }
    }

    public function getUsersAndRolesForGivenOrganisation($organisation)
    {
        $users = array();

        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select('uors')
            ->leftJoin('uors.user', 'user')
            ->leftJoin('uors.role', 'role')
            ->addSelect('user')
            ->addSelect('role')
            ->andWhere('uors.organisation = :organisation')
            ->setParameter('organisation', $organisation);

        $query = $qb->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $res =  $query->getResult();

            foreach ($res as $uor) {
                if (!array_key_exists($uor->getUser()->getId(), $users)) {
                    $users[$uor->getUser()->getId()] = $uor->getUser();
                    $users[$uor->getUser()->getId()]->roles = array();
                }

                if (!array_key_exists($uor->getRole()->getId(), $users[$uor->getUser()->getId()]->roles)) {
                    $users[$uor->getUser()->getId()]->roles[$uor->getRole()->getId()] = $uor->getRole();
                }
            }
        } catch (\Exception $e) {
            return false;
        }

        return $users;
    }

    /**
     * Returns list of Uors objects
     *
     * @param   integer     $limit      Limit to apply
     * @param   integer     $offset     Offset to apply
     * @param   array       $filters    List of Criterion objects to apply
     * @param   array       $sorts      List of sorts to apply
     * @param   boolean     $totalcount Whether to return total number of objects in the set
     * @param   array       $args       Array of arguments you may wish to pass to filter
     * @return  array
     */
    public function getUors($limit = null, $offset = null, $filters = array(), $sorts = array(), $totalcount = false, $args = array())
    {
        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select('uors')
            ->addSelect('user')
            ->leftJoin('uors.user', 'user')
            ->addSelect('role')
            ->leftJoin('uors.role', 'role');

        $joinOrganisations  = false;

        foreach ($filters as $filter) {
            foreach ($filter->getCriterions() as $criterion) {
                if (in_array($criterion->getKey(), self::getOrganisationFilters())) {
                    $joinOrganisations = true;
                }
            }
        }

        if ($joinOrganisations) {
            $qb
                ->addSelect('organisation')
                ->leftJoin('uors.organisation', 'organisation');
        }

        if (!$totalcount) {
            // Add limit only if not set to 0
            // as this allows to cancel limit and get all events
            if (!is_null($limit) && $limit != 0) {
                $qb->setMaxResults($limit);
            }

            // Add offset only if not set to 0
            // as this allows to cancel offset
            if (!is_null($offset) && $offset != 0) {
                $qb->setFirstResult($offset);
            }
        }

        // If there are any filters
        if(!empty($filters)) {
            $dql = Filter::filtersToDqlClause($filters, $qb);
        }

        // Add sorts
        foreach ($sorts as $sort) {
            $qb->addOrderBy($sort->field(), $sort->direction());
        }

        // Default sorts if none present
        if (empty($sorts)) {
            $qb
                ->addOrderBy('user.id', 'ASC');
        }

        $query = $qb->getQuery();

        $res = $query->getResult();

        if ($totalcount) {
            return array('results' => array_slice($res, $offset, $limit), 'totalcount' => count($res));
        }

        return array('results' => $res, 'totalcount' => count($res));
    }

    /**
     * Returns list of Organisations that match filters
     *
     * @param   integer     $limit      Limit to apply
     * @param   integer     $offset     Offset to apply
     * @param   array       $filters    List of Criterion objects to apply
     * @param   array       $sorts      List of sorts to apply
     * @param   boolean     $totalcount Whether to return total number of objects in the set
     * @param   array       $args       Array of arguments you may wish to pass to filter
     * @return  array
     */
    public function getOrganisations($limit = null, $offset = null, $filters = array())
    {
        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select(array('uors', 'org'))
            ->leftJoin('uors.role', 'role')
            ->leftJoin('uors.organisation', 'org')
            ->leftJoin('uors.user', 'user');

        // If there are any filters
        if(!empty($filters)) {
            $dql = Filter::filtersToDqlClause($filters, $qb);
        }

        $query = $qb->getQuery();

        $uors = $query->getResult();

        $orgs = array();
        foreach($uors as $uor) {
            $orgs[$uor->getOrganisation()->getNamespace()] = $uor->getOrganisation();

            $descendants = $uor->getOrganisation()->getDescendants();

            foreach($descendants as $descendant) {
                $orgs[$descendant->getNamespace()] = $descendant;
            }
        }

        return $orgs;
    }

    /**
     * Returns list of Users that match filters
     *
     * @param   integer     $limit      Limit to apply
     * @param   integer     $offset     Offset to apply
     * @param   array       $filters    List of Criterion objects to apply
     * @param   array       $sorts      List of sorts to apply
     * @param   boolean     $totalcount Whether to return total number of objects in the set
     * @param   array       $args       Array of arguments you may wish to pass to filter
     * @return  array
     */
    public function getUsers($limit = null, $offset = null, $filters = array())
    {
        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select(array('uors', 'user'))
            ->leftJoin('uors.role', 'role')
            ->leftJoin('uors.user', 'user')
            ->leftJoin('uors.organisation', 'organisation')
            ->leftJoin('user.emails', 'email');


        // If there are any filters
        if(!empty($filters)) {
            $dql = Filter::filtersToDqlClause($filters, $qb);
        }

        $query  = $qb->getQuery();
        $uors   = $query->getResult();
        $users  = array();

        foreach($uors as $uor) {
            $users[$uor->getUser()->getUsername()] = $uor->getUser();
        }

        return $users;
    }
}
